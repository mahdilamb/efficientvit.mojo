EfficientViTCls(
  (backbone): EfficientViTBackbone(
    (input_stem): OpSequential(
      (op_list): ModuleList(
        (0): ConvLayer(
          (conv): Conv2d(3, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (norm): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (act): Hardswish()
        )
        (1): ResidualBlock(
          (main): DSConv(
            (depth_conv): ConvLayer(
              (conv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
              (norm): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (act): Hardswish()
            )
            (point_conv): ConvLayer(
              (conv): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (norm): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (shortcut): IdentityLayer()
        )
      )
    )
    (stages): ModuleList(
      (0): OpSequential(
        (op_list): ModuleList(
          (0): ResidualBlock(
            (main): MBConv(
              (inverted_conv): ConvLayer(
                (conv): Conv2d(16, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (act): Hardswish()
              )
              (depth_conv): ConvLayer(
                (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=64, bias=False)
                (norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (act): Hardswish()
              )
              (point_conv): ConvLayer(
                (conv): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
          )
          (1): ResidualBlock(
            (main): MBConv(
              (inverted_conv): ConvLayer(
                (conv): Conv2d(32, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (act): Hardswish()
              )
              (depth_conv): ConvLayer(
                (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128, bias=False)
                (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (act): Hardswish()
              )
              (point_conv): ConvLayer(
                (conv): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (shortcut): IdentityLayer()
          )
        )
      )
      (1): OpSequential(
        (op_list): ModuleList(
          (0): ResidualBlock(
            (main): MBConv(
              (inverted_conv): ConvLayer(
                (conv): Conv2d(32, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (act): Hardswish()
              )
              (depth_conv): ConvLayer(
                (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=128, bias=False)
                (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (act): Hardswish()
              )
              (point_conv): ConvLayer(
                (conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
          )
          (1-2): 2 x ResidualBlock(
            (main): MBConv(
              (inverted_conv): ConvLayer(
                (conv): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (act): Hardswish()
              )
              (depth_conv): ConvLayer(
                (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256, bias=False)
                (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (act): Hardswish()
              )
              (point_conv): ConvLayer(
                (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (shortcut): IdentityLayer()
          )
        )
      )
      (2): OpSequential(
        (op_list): ModuleList(
          (0): ResidualBlock(
            (main): MBConv(
              (inverted_conv): ConvLayer(
                (conv): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1))
                (act): Hardswish()
              )
              (depth_conv): ConvLayer(
                (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256)
                (act): Hardswish()
              )
              (point_conv): ConvLayer(
                (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
          )
          (1-3): 3 x EfficientViTBlock(
            (context_module): ResidualBlock(
              (main): LiteMLA(
                (qkv): ConvLayer(
                  (conv): Conv2d(128, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
                )
                (aggreg): ModuleList(
                  (0): Sequential(
                    (0): Conv2d(384, 384, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=384, bias=False)
                    (1): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), groups=24, bias=False)
                  )
                )
                (kernel_func): ReLU()
                (proj): ConvLayer(
                  (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
              )
              (shortcut): IdentityLayer()
            )
            (local_module): ResidualBlock(
              (main): MBConv(
                (inverted_conv): ConvLayer(
                  (conv): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1))
                  (act): Hardswish()
                )
                (depth_conv): ConvLayer(
                  (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512)
                  (act): Hardswish()
                )
                (point_conv): ConvLayer(
                  (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
              )
              (shortcut): IdentityLayer()
            )
          )
        )
      )
      (3): OpSequential(
        (op_list): ModuleList(
          (0): ResidualBlock(
            (main): MBConv(
              (inverted_conv): ConvLayer(
                (conv): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1))
                (act): Hardswish()
              )
              (depth_conv): ConvLayer(
                (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=512)
                (act): Hardswish()
              )
              (point_conv): ConvLayer(
                (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
          )
          (1-4): 4 x EfficientViTBlock(
            (context_module): ResidualBlock(
              (main): LiteMLA(
                (qkv): ConvLayer(
                  (conv): Conv2d(256, 768, kernel_size=(1, 1), stride=(1, 1), bias=False)
                )
                (aggreg): ModuleList(
                  (0): Sequential(
                    (0): Conv2d(768, 768, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=768, bias=False)
                    (1): Conv2d(768, 768, kernel_size=(1, 1), stride=(1, 1), groups=48, bias=False)
                  )
                )
                (kernel_func): ReLU()
                (proj): ConvLayer(
                  (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
              )
              (shortcut): IdentityLayer()
            )
            (local_module): ResidualBlock(
              (main): MBConv(
                (inverted_conv): ConvLayer(
                  (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1))
                  (act): Hardswish()
                )
                (depth_conv): ConvLayer(
                  (conv): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1024)
                  (act): Hardswish()
                )
                (point_conv): ConvLayer(
                  (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
              )
              (shortcut): IdentityLayer()
            )
          )
        )
      )
    )
  )
  (head): ClsHead(
    (op_list): ModuleList(
      (0): ConvLayer(
        (conv): Conv2d(256, 1536, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm): BatchNorm2d(1536, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act): Hardswish()
      )
      (1): AdaptiveAvgPool2d(output_size=1)
      (2): LinearLayer(
        (linear): Linear(in_features=1536, out_features=1600, bias=False)
        (norm): LayerNorm((1600,), eps=1e-05, elementwise_affine=True)
        (act): Hardswish()
      )
      (3): LinearLayer(
        (linear): Linear(in_features=1600, out_features=1000, bias=True)
      )
    )
  )
)